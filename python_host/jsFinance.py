"""
Filename: jsFinance.py
Purpose : this file contains the jsFinance class. This class represents an instance of a command line interface. To
          interact with jsFinance class run the file "run_jsfinance.py" or see README.md for more guidance.
"""
"""

Pre-presentation priorities__________________________________________________________________________________________
todo: presentation (slides??) - Sarah post on piazza to see. Present @2:50 
todo: test connection to database via user input.
todo: delete operations
todo: transaction operations
todo: ensure 3-4 desired demonstration aspects are VERY POLISHED. Maybe yfinance download, view goals, and sell stock/
      buy stock? 
todo: yfinance implementation in jsFinance class. I'm thinking that we MANUALLY have people update this. 
      My tables_create starts with stock values so in the worst case,we just would have outdated stock information. 
      

Pre turn-in priorities__________________________________________________________________________________________
todo: ping database right after creating self.connection object to ensure we have communication. display success
      message to user.
todo: update report (can we front load / get this out of the way on wednesday?)
todo: figure out how to make this work for a no-password mysql
todo: test building code on sarah's work machine
todo: implement user roles slightly more rigorously for extra credit....would involve "help" display including a message
      about how "you're currently logged into a user role, and have these options." "You're admin, so you have THESE 
      options."
todo: https://piazza.com/class/lm0p7gnfxm55oo/post/823
TA Yug Deepak Rajani: 
* You can have a section "Prerequisites" as a part of which you can call out that Python and 
    pip should be installed on the system.
*  The requirements.txt file should be an autogenerated file (using pip freeze > requirements.txt) that contains a 
    list of packages or libraries needed, you do not need to write that file manually or write any automation which 
    installs Python on the grader's system. I hope this clarifies.

"""

import time
from tabulate import tabulate
import sys
from helpers import *
import os

# todo: delete troubleshooting var at end
global troubleshoot
troubleshoot = True


def print_troubleshoot(item_to_print: str):
    """
    Helper method to delete later. todo: delete.
    :param item_to_print: item to print if troubleshooting is activated
    """
    if troubleshoot:
        print("Troubleshoot purposes only:" + str(item_to_print))


# Section: static methods

def connect_via_command_line_input():
    """
    Prompts user for their username and password. Attempts to connect to that
    database using connect_to_sql_database() function.

    :return: Object of type <class 'mysql.connector.connection.MySQLConnection'> if successful.
             Otherwise, returns None if connection was unsuccessful.
    """

    # Prompt user for inputs and strip whitespace
    host = input("Enter database host (often 'localhost'): ").strip()
    username = input("Enter database username (often 'root'): ").strip()
    password = input("Enter database password: ").strip()
    authentication_dict = {"host": host, "username": username, "password": password}

    # Attempt connection via connect_to_sql_database and then check validity of the result
    database = connect_to_sql_database(authentication_dict)
    connection_was_successful = isinstance(database, pymysql.connections.Connection)

    if connection_was_successful:
        print(f'Successfully connected to database "jsfinance".')
        return database

    else:
        # If fails, let user try again. Recurse until successful connection OR user stops trying
        continue_prompting = input('You did not successfully connect. '
                                   'Enter "y" if you want to try again. '
                                   'Press any other key to exit:')
        if continue_prompting.lower() == "y":
            # User chooses to continue.
            # If the recursive call yields a working connection, this function will return a
            #  MySqlConnection object
            return connect_via_command_line_input()
        else:
            # User doesn't want to continue -> print failure and return None
            print(f'Exiting program. '
                  f'Failed to connect to database "jsfinance" with username "{username}".')
            return None


class jsFinance:
    """
    todo: add documentation
    """

    def __init__(self, authentication_dict=None):
        self.welcome_message()

        # Connect via default connection (command line input) or via authentication dictionary
        if authentication_dict:
            self.connection = connect_to_sql_database(authentication_dict)
        else:
            self.connection = connect_via_command_line_input()

        self.cursor = self.connection.cursor()
        self.user = "Admin"  # tracks current user role
        self.first_name = "Admin"  # tracks current username
        self.family = None  # IF self.user is not Admin (is a specific user), this holds the family information

        # Define dictionary of program commands
        self.command_dict = {}
        self.command_dict["help"] = {
            "command": self.help_command,
            "user": True,
            "Admin": True
        }
        self.command_dict["exit"] = {
            "command": self.exit_program,
            "user": True,
            "Admin": True
        }
        self.command_dict["clear"] = {
            "command": self.clear_screen,
            "user": True,
            "Admin": True
        }
        self.command_dict["view my accounts"] = {
            "command": self.view_account_details_for_user,
            "user": True,
            "Admin": False
        }
        self.command_dict["select user"] = {
            "command": self.select_user,
            "user": True,
            "Admin": True
        }
        self.command_dict["admin mode"] = {
            "command": self.enter_admin_mode,
            "user": True,
            "Admin": True
        }
        self.command_dict["create user"] = {
            "command": self.create_user,
            "user": False,
            "Admin": True
        }
        self.command_dict["create account"] = {
            "command": self.create_account,
            "user": True,
            "Admin": True
        }
        self.command_dict["create family"] = {
            "command": self.create_family,
            "user": True,
            "Admin": True
        }
        self.command_dict["create goal"] = {
            "command": self.create_goal,
            "user": True,
            "Admin": False
        }
        self.command_dict["update my family"] = {
            "command": self.update_my_family,
            "user": True,
            "Admin": False
        }
        self.command_dict["deposit money"] = {
            "command": self.deposit_money,
            "user": True,
            "Admin": False
        }
        self.command_dict["take out loan"] = {
            "command": self.take_out_loan,
            "user": True,
            "Admin": False
        }
        self.command_dict["place trade"] = {
            "command": self.place_trade,
            "user": True,
            "Admin": False
        }
        self.command_dict["view all families"] = {
            "command": self.view_all_families,
            "user": False,
            "Admin": True
        }
        self.command_dict["view all users"] = {
            "command": self.view_all_users,
            "user": False,
            "Admin": True
        }
        self.command_dict["view all accounts"] = {
            "command": self.view_all_accounts,
            "user": False,
            "Admin": True
        }
        self.command_dict["delete my goal"] = {
            "command": self.delete_goal,
            "user": True,
            "Admin": False
        }
        self.command_dict["delete my entire account"] = {
            "command": self.delete_user,
            "user": True,
            "Admin": False
        }
        self.command_dict["delete my family"] = {
            "command": self.delete_family,
            "user": True,
            "Admin": False
        }
        self.command_dict["remove myself from family"] = {
            "command": self.update_my_family_to_null,
            "user": True,
            "Admin": False
        }
        self.command_dict["view all goals"] = {
            "command": self.view_all_goals,
            "user": False,
            "Admin": True
        }
        self.command_dict["view all holdings"] = {
            "command": self.view_all_holdings,
            "user": False,
            "Admin": True
        }
        self.command_dict["view all transactions"] = {
            "command": self.view_all_transactions,
            "user": False,
            "Admin": True
        }
        self.command_dict["view all investments"] = {
            "command": self.view_all_investments,
            "user": True,
            "Admin": True
        }
        self.command_dict["view my transactions"] = {
            "command": self.view_user_transactions,
            "user": True,
            "Admin": False
        }
        self.command_dict["view my goals"] = {
            "command": self.view_goals_for_user,
            "user": True,
            "Admin": False
        }
        self.command_dict["view my family accounts"] = {
            "command": self.view_accounts_details_for_family,
            "user": True,
            "Admin": False
        }
        self.command_dict["view my family summary"] = {
            "command": self.view_accounts_details_for_family_by_type,
            "user": True,
            "Admin": False
        }
        self.command_dict["view my holdings"] = {
            "command": self.view_my_stock_holdings,
            "user": True,
            "Admin": False
        }

        # Build out menu options based on self.command_dict
        user_commands = [command for command, details in self.command_dict.items() if details.get("user", False)]
        admin_commands = [command for command, details in self.command_dict.items() if details.get("Admin", False)]
        user_commands_menu = "User options are:\n    * " + "\n    * ".join(user_commands)
        admin_commands_menu = "Admin options are:\n    * " + "\n    * ".join(admin_commands)

        self.command_list = {"Admin": admin_commands_menu, "User": user_commands_menu}

    @staticmethod
    def welcome_message():
        # Inform user they've entered the program
        print("+----------------------------------------------------------------------------------------------------+")
        print("|                                 jsFinance Personal Finance Tracker                                 |")
        print("+----------------------------------------------------------------------------------------------------+")

    def clear_screen(self):
        """
        Clears screen of cli based on operating system.
        """
        # Clear the screen based on the operating system and re-print welcome message
        print_troubleshoot(os.name)
        if os.name == 'nt':
            os.system('cls')
            self.welcome_message()
        else:
            os.system('clear')
            self.welcome_message()

    def run(self):
        """
        This method runs the command line interface until an error occurs, or until the user quits.
        :return: void
        """
        exit_program = False

        print("\nYou've entered the jsFinance tracker! Type any command to begin!"
              " (type 'help' to see list of commands).")

        # try-finally block makes sure that connection closes out even if unhandled errors arise
        try:
            while not exit_program:
                user_input = input(f"{self.first_name}:")
                self.execute_input(user_input)
        finally:
            self.close_connection()

    def enter_admin_mode(self):
        """
        Updates self.user to "Admin"
        """
        self.user = "Admin"
        self.first_name = "Admin"
        self.family = None

    def exit_program(self):
        """
        Commits changes to database, closes database connection, prints message to user, and then exits the CLI.
        """

        # Commit changes to database
        self.commit_to_database()

        # Close database connection
        self.close_connection()

        # Print helpful message
        print("+----------------------------------------------------------------------------------------------------+")
        print("|                                          exiting jsFinance                                         |")
        print("+----------------------------------------------------------------------------------------------------+")

        # Sleep for 1 second
        time.sleep(1)

        # Exit
        sys.exit(0)

    def commit_to_database(self):
        """
        Commits changes to database.
        """
        self.connection.commit()

    def close_connection(self):
        """
        Closes connection with database.
        """

        # if self.connection isn't None, then test if connection needs closing
        if self.connection:

            # Check if connection still exists
            try:
                self.connection.ping(reconnect=True)

            # If there's an error, then do nothing
            except pymysql.Error:
                pass

            # If pinging does NOT cause an error, call close()
            else:
                self.connection.close()

    def help_command(self):
        """
        Prints allowed commands at that point in the CLI program.
        """
        if self.user == "Admin":
            print(self.command_list["Admin"])
        else:
            print(self.command_list["User"])

    def execute_input(self, user_input: str):
        """
        Parses user_input and then executes the associated command from self.command_dict.
        :param user_input: string with desired command, like "help" or "show goals"
        :return: VOID
        """
        # Start by stripping all whitespace from user_input and making lower case
        parsed_input = user_input.strip().lower()

        # If input is a key in self.command_dict then run the function stored with that key
        if parsed_input in self.command_dict.keys():
            command_allowed_for_admin = self.command_dict[parsed_input]["Admin"]
            command_allowed_for_user = self.command_dict[parsed_input]["user"]

            # If user has authority to do that action then execute it
            if (command_allowed_for_admin and self.user == "Admin") or \
                    (command_allowed_for_user and self.user != "Admin"):
                self.command_dict[parsed_input]["command"]()

            # If user does NOT have the authority but it IS a valid command, print helpful message
            else:
                if self.user == "Admin":
                    print('That command is only allowed for individual users. Type "select user" to enter user mode.')
                else:
                    print('That command is only allowed for Admins. Type "Admin mode" to exit user mode.')

        # else, print helpful string
        else:
            print(f'The command "{user_input}" is unknown. Type "help" to see list of valid commands.')

    def view_account_details_for_user(self):
        """
        Shows account details for current user.
        """

        # if user isn't the admin, then execute
        if self.user != "Admin":

            # Define prompt
            prompt = f"CALL view_accounts_details_for_user({self.user})"

            # Execute the sql code and then parse the results
            cursor_output = self.sql_helper(prompt)
            self.parse_result("print table", cursor_output)

        # If no user is selected, print error message
        else:
            print("Cannot show account details because user is not selected.")

    @staticmethod
    def get_input_tuple(input_requirements):
        """
        input_requirements is a list of pairs, where the first element of each pair is the input string (what is
        displayed to the user) and the second element is the input data type.
        :param input_requirements: a list of dicts of prompts, data, and data types, like
                [
                 {"user_input": None, "data": 2, "data_type": Number},
                 {"user_input": "Enter your name:", "data": None, "data_type": str}
                ]
        :return: a string representing the output of the user input, like "(5, "Hello world!")"
        """

        # initialize the list of parameter values
        parameter_list = []

        # Iterate across each input requirement
        for item in input_requirements:
            # If the list element requires user input, then prompt for it:
            if item["user_input"]:
                input_placeholder = input(item["user_input"])

            # Otherwise, pass the data directly
            else:
                input_placeholder = item["data"]

            # If data_type is numeric, then don't put double quotes
            if item["data_type"] == "number":
                parameter_list.append(f'{input_placeholder}')

            # If data_type is non-numeric, put double quotes around
            elif item["data_type"] == "string":
                parameter_list.append(f'"{input_placeholder}"')

            # If not number or string, raise error (unknown case)
            else:
                print(f"An unknown error occurred.")

        concatenated_parameter_list = "(" + ", ".join(parameter_list) + ")"
        # todo remove troubleshooting
        print_troubleshoot(f"concatenated_parameter_list = {concatenated_parameter_list}")
        return concatenated_parameter_list

    def sql_helper(self, function_or_procedure_call, input_requirements=None):
        """
        This helper method does the heavy lifting for interacting with the database. It:
            (1) prompts the user for inputs
            (2) parses them via get_input_tuple
            (3) executes the sql against the database
            (4) returns the result from self.cursor.fetchall()

        :param function_or_procedure_call: the sql query statement, like "SELECT get_user_id"
        :param input_requirements: a list of dicts of prompts, data, and data types, like
                [
                 {"user_input": None, "data": 2, "data_type": "number"},
                 {"user_input": "Enter your name:", "data": None, "data_type": str}
                ]

        :return: the cursors fetchall result
        """

        # Get parameter string if there are input_requirements
        if input_requirements:
            parameter_list = self.get_input_tuple(input_requirements)

        # If there are no input requirements then there are no parameters
        else:
            parameter_list = ""

        # Define the sql text
        sql_txt = f'{function_or_procedure_call}{parameter_list}'
        print_troubleshoot(f"{sql_txt}")  # todo delete this troubleshooting

        # Try executing the function/procedure in the database
        try:
            self.cursor.execute(sql_txt)
            result = self.cursor.fetchall()
            # If no error arises, return the result
            return result

        # Handle SQL error (catching signals written in our procedures/functions)
        except pymysql.Error as e:

            # Extract the error text by finding portion in single quotes
            print(f"Program Error: {extract_error_message_from_signal(str(e))}")

        # Catch all other exceptions (unknown case)
        except Exception as e:
            print(f"An unknown error occurred: {e}")

        # In error cases, return None
        return None

    @staticmethod
    def parse_result(result_expectation, sql_result_output):
        """
        Given a result expectation and a cursor output, this function parses the result in the desired manner.

        :param result_expectation: "print table", "single number", or None
        :param sql_result_output: the result from the cursor
        :return: parsed result based on the result_expectation. In some cases this simply means printing a table.
        """
        # If the results are a table, print them using tabulate
        if result_expectation == "print table":
            if sql_result_output:
                # print(tabulate(pd.DataFrame(sql_result_output), headers='keys', tablefmt='pretty', showindex=False))
                pretty_print_sql_results_table(sql_result_output)
            else:
                print("There is nothing to show for that request.")

        # If the result is a single number, then return that number
        elif result_expectation == "single number":
            if sql_result_output:
                first_dict = sql_result_output[0]
                key, value = next(iter(first_dict.items()))
                if isinstance(value, Number):
                    return value
                else:
                    print("Error in parse result: expected numeric.")
                    return None
            else:
                return None

        elif result_expectation == "string":
            if sql_result_output:
                print_troubleshoot(sql_result_output)
                first_dict = sql_result_output[0]
                key, value = next(iter(first_dict.items()))
                if isinstance(value, str):
                    return value
                else:
                    print("Error in parse result: expected string.")
                    return None
            else:
                print("There is nothing to show for that request.")
                return None

        # otherwise, print an error statement
        else:
            print("Error in parse_result: unknown result_expectation.")
            return None

    def select_user(self):
        """
        Allows user to "login" by entering their email. If the email is found in users table, then
        self.user will be updated.
        """
        # Define prompt and input requirements
        prompt = "SELECT get_user_id"
        input_requirements = [
            {"user_input": "Provide user email:", "data": None, "data_type": "string"}
        ]

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt, input_requirements)
        user_id = self.parse_result("single number", cursor_output)

        print_troubleshoot(f"user_id for that user was calculated to be: {user_id}")  # todo remove troubleshoot

        # If result of parse result is NOT none, then we have new user_id
        if user_id:
            # Updates self.user to the selected user
            self.user = user_id

            # Call automatic_family_update to update self.family
            self.automatic_family_update()
            self.automatic_first_name_update()
        else:
            print('Try "view all users" to see valid user emails.')

    def automatic_family_update(self):
        """
        When the session's self.user is updated to a certain user, update the family accordingly.
        """
        # Define prompt and input requirements
        prompt = "SELECT get_user_family"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt, input_requirements)
        family_id = self.parse_result("single number", cursor_output)

        print_troubleshoot(f"family_id was found to be {family_id}")  # todo remove troubleshoot

        # Updates self.family to the selected family IF family_id is greater than 0
        if family_id > 0:
            self.family = family_id
        # A user with no family will return get_user_family(user_id_p) = -1
        else:
            self.family = None

    def automatic_first_name_update(self):
        """
        When the session's self.user is updated to a certain user, update the family accordingly.
        """
        # Define prompt and input requirements
        prompt = "SELECT get_user_first_name"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt, input_requirements)
        first_name = self.parse_result("string", cursor_output)

        print_troubleshoot(f"first_name was found to be {first_name}")  # todo remove troubleshoot

        # Updates self.family to the selected family IF family_id is greater than 0
        if first_name != "":
            self.first_name = first_name
        # A user with no first_name will cause error
        else:
            # todo: actual error handling or nah?
            print("Error: unknown state in automatic_first_name_update.")

    def update_user_family(self, new_family_id: str):
        """
        Update's user's family to the new family ID.
        """
        prompt = "CALL update_user_family"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"},
            {"user_input": None, "data": new_family_id, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        print_troubleshoot(cursor_output)
        print_troubleshoot(self.parse_result("single number", cursor_output))

    def create_user(self):
        """
        Creates a user in the database.
        """
        # Define prompt and input_requirements
        prompt = f"CALL create_user"

        input_requirements = [
            {"user_input": "Provide user email:", "data": None, "data_type": "string"},
            {"user_input": "Provide user first name:", "data": None, "data_type": "string"},
            {"user_input": "Provide user last name:", "data": None, "data_type": "string"},
            {"user_input": None, "data": "NULL", "data_type": "number"},
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)

    def create_account(self):
        """
        Creates a new user account. If in admin mode, this requires entering the user_id number. If in user mode,
        this will automatically associate the new account with the session's current user.
        """

        prompt = f"CALL create_account"

        # input requirements are slightly different for admin vs. user. For user, the user_id is automatically  passed
        if self.user == "Admin":
            user_id_input = None
            user_id_request_message = "Provide user ID:"
        else:
            user_id_input = self.user
            user_id_request_message = None

        input_requirements = [
            {"user_input": "Provide account ID at institution:", "data": None, "data_type": "string"},
            {"user_input": "Provide institution name:", "data": None, "data_type": "string"},
            {"user_input": "Provide account nickname:", "data": None, "data_type": "string"},
            {"user_input": "Provide account type (loan, checkings, savings, 401(k), roth IRA, "
                           "traditional IRA, 529, taxable brokerage):", "data": None, "data_type": "string"},
            {"user_input": user_id_request_message, "data": user_id_input, "data_type": "number"},
            {"user_input": None, "data": "NULL", "data_type": "number"},
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)

        result = self.parse_result("single number", cursor_output)

        if result == 200:
            print("Successfully created account.")

    def create_goal(self):
        """
        Creates a goal associated with the current user.
        """

        prompt = f"CALL create_goal"

        input_requirements = [
            {"user_input": "Provide goal name:", "data": None, "data_type": "string"},
            {"user_input": "Provide goal amount:", "data": None, "data_type": "number"},
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        if result == 200:
            print("Successfully created goal.")

    def create_family(self):
        """
        Creates a new family. If in admin mode, this simply creates a family. If in user mode,
        this will automatically associate the new family with the current user. If the current user already HAS a
        family, then this will not do anything.
        """

        prompt = f"SELECT create_family"

        # input requirements are slightly different for admin vs. user. If user already has a family, then stop
        if self.user != "Admin":
            # If user already has a family associated with themselves, print message and exit
            if self.family:
                print('Cannot create family as user already has a family associated. '
                      'Try function "remove self from family"')
                pass  # exit the function

            # Otherwise if user has no family, create the family and then associate it with the given user

        input_requirements = [
            {"user_input": "Provide family name:", "data": None, "data_type": "string"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        family_id = self.parse_result("single number", cursor_output)

        print_troubleshoot(f"matthews new fam id is {family_id}")

        # If self.user != "Admin", then associate family id with current user and update self.family
        if self.user != "Admin":
            self.family = family_id
            self.update_user_family(family_id)

    def update_my_family_to_null(self):
        """
        Removes a user's association with their family.
        """
        prompt = f"CALL update_user_family_to_null"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        # If deletion was a success, print a message and update the session details
        if result == 200:
            print("Successfully removed user from family.")
            self.automatic_family_update()  # update session variable

    def update_my_family(self):
        """
        Removes a user's association with their family.
        """
        prompt = f"CALL update_user_family"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"},
            {"user_input": "Provide Family ID of family you wish to join:", "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        # If deletion was a success, print a message and update the session details
        if result == 200:
            print("Successfully added user to family.")
            self.automatic_family_update()
            print_troubleshoot(f"update_my_family(): new family is now {self.family}")

    def take_out_loan(self):
        """
        Using the account nickname, the user can take out a loan in the account.
        """
        prompt = f"CALL take_loan_by_account_name"

        transaction_date = datetime.datetime.today().strftime("%Y-%m-%d")

        input_requirements = [
            {"user_input": None, "data": transaction_date, "data_type": "string"},
            {"user_input": "Provide account nickname:", "data": None, "data_type": "string"},
            {"user_input": None, "data": self.user, "data_type": "number"},
            {"user_input": "Provide loan amount: $", "data": None, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        print_troubleshoot(result)
        if result == 200:
            print("Successfully took out loan.")

    def deposit_money(self):
        """
        Using the account nickname, the user can deposit money in the account.
        """
        prompt = f"CALL deposit_money_by_account_name"
        transaction_date = datetime.datetime.today().strftime("%Y-%m-%d")

        input_requirements = [
            {"user_input": None, "data": transaction_date, "data_type": "string"},
            {"user_input": "Provide account nickname:", "data": None, "data_type": "string"},
            {"user_input": None, "data": self.user, "data_type": "number"},
            {"user_input": "Provide deposit amount: $", "data": None, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        if result == 200:
            print("Successfully deposited money.")

    def place_trade(self):
        """
        Allows user to buy or sell an investment in the specified account.
        """
        # Determine if buying or selling - exit function if neither
        buy_or_sell = input('Enter type of trade ("buy" or "sell"):').lower().strip()
        if buy_or_sell != "buy" and buy_or_sell != "sell":
            print(f'Unknown trade type was entered ("{buy_or_sell}").')
            return

        # Determine trade type (by share or amount) - exit function if neither
        trade_type = input('Enter trade method ("share" or "amount"):').lower().strip()
        if trade_type != "share" and trade_type != "amount":
            print(f'Unknown trade type was entered ("{trade_type}").')
            return

        # Determine today's date
        transaction_date = datetime.datetime.today().strftime("%Y-%m-%d")

        # Determine prompt language for provide shares / provide amount
        if trade_type == "share":
            prompt_language = "Provide number of shares:"
        else:
            prompt_language = "Provide amount to trade: $"

        prompt = f"CALL {buy_or_sell}_investment_by_{trade_type}_account_nickname"
        input_requirements = [
                {"user_input": None, "data": transaction_date, "data_type": "string"},
                {"user_input": "Provide account nickname:", "data": None, "data_type": "string"},
                {"user_input": None, "data": self.user, "data_type": "number"},
                {"user_input": f"{prompt_language}", "data": None, "data_type": "number"},
                {"user_input": "Provide symbol to trade:", "data": None, "data_type": "string"},
            ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        if result == 200:
            if buy_or_sell == "buy":
                print("Successfully purchased stock.")
            elif buy_or_sell == "sell":
                print("Successfully sold stock.")
            else:
                print("Success code but unknown state.")

    def delete_user(self):
        """
        Deletes the current user.
        """

        # Prompt user to enter y if they want to delete
        are_you_sure = input('Are you sure you want to delete your entire account? Enter "y" to continue:')
        if are_you_sure.lower().strip() == "y":
            prompt = f"CALL delete_user"
            input_requirements = [
                {"user_input": None, "data": self.user, "data_type": "number"}
            ]

            # Execute the sql code
            cursor_output = self.sql_helper(prompt, input_requirements)
            result = self.parse_result("single number", cursor_output)

            # If deletion was a success, print a message and update the session details
            if result == 200:
                print("Successfully deleted user.")
                self.enter_admin_mode()

    def delete_family(self):
        """
        Deletes the family of the current user.
        """

        prompt = f"CALL delete_family"
        input_requirements = [
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        # If deletion was a success, print a message and update the session details
        if result == 200:
            print("Successfully deleted family.")
            self.family = None

    def delete_goal(self):
        """
        Deletes the specified goal.
        """

        prompt = f"CALL delete_goal"
        input_requirements = [
            {"user_input": "Provide name of goal to delete:", "data": None, "data_type": "string"},
            {"user_input": None, "data": self.user, "data_type": "number"}
        ]

        # Execute the sql code
        cursor_output = self.sql_helper(prompt, input_requirements)
        result = self.parse_result("single number", cursor_output)

        # If deletion was a success, print a message and update the session details
        if result == 200:
            print("Successfully deleted goal.")

    def view_all_families(self):
        """
        Shows entire family table
        """

        # Define prompt
        prompt = f"CALL view_all_families()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_users(self):
        """
        Shows entire user table
        """

        # Define prompt
        prompt = f"CALL view_all_users()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_accounts(self):
        """
        Shows entire account table
        """
        # joseph todo : model off of view_all_families

        # Define prompt
        prompt = f"CALL view_all_accounts()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_goals(self):
        """
        Shows entire goals table
        """

        # Define prompt
        prompt = f"CALL view_all_goals()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_holdings(self):
        """
        Shows entire holdings table
        """

        # Define prompt
        prompt = f"CALL view_all_holdings()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_investments(self):
        """
        Shows entire investments table
        """

        # Define prompt
        prompt = f"CALL view_all_investments()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_all_transactions(self):
        """
        Shows entire transactions table
        """

        # Define prompt
        prompt = f"CALL view_all_transactions()"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_user_transactions(self):
        """
        Shows user's transactions
        """

        # Define prompt
        prompt = f"CALL view_user_transactions({self.user})"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)

    def view_goals_for_user(self):
        """
        Allows user to view their goals.
        """

        # if user isn't the admin, then execute
        if self.user != "Admin":

            # Define prompt
            prompt = f"CALL view_goals_for_user({self.user})"

            # Execute the sql code and then parse the results
            cursor_output = self.sql_helper(prompt)
            self.parse_result("print table", cursor_output)

        # If no user is selected, print error message
        else:
            print("Cannot show user goals because user is not selected.")

    def view_accounts_details_for_family_by_type(self):
        """
        Allows user to view their family's account summary.
        """
        # if user family isn't None
        if self.family:

            # Define prompt
            prompt = f"CALL view_accounts_details_for_family_by_type({self.family})"

            # Execute the sql code and then parse the results
            cursor_output = self.sql_helper(prompt)
            self.parse_result("print table", cursor_output)

        # If no user is selected, print error message
        else:
            if self.user == "Admin":
                print("Select a user to show family details.")
            else:
                print("User does not have a family to show details.")

    def view_accounts_details_for_family(self):
        """
        Allows user to view their family's account details.
        """
        # if user family isn't None
        if self.family:

            # Define prompt
            prompt = f"CALL view_accounts_details_for_family({self.family})"

            # Execute the sql code and then parse the results
            cursor_output = self.sql_helper(prompt)
            self.parse_result("print table", cursor_output)

        # If no user is selected, print error message
        else:
            if self.user == "Admin":
                print("Select a user to show family details.")
            else:
                print("User does not have a family to show details.")

    def view_my_stock_holdings(self):
        """
        Allows user to view the stock holdings of all their accounts
        """
        # Define prompt
        prompt = f"CALL view_my_holdings({self.user})"

        # Execute the sql code and then parse the results
        cursor_output = self.sql_helper(prompt)
        self.parse_result("print table", cursor_output)
